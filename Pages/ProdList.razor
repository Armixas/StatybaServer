@page "/prodList"
@inject IBlazorStrap BlazorStrap
@inject NavigationManager NavManager
@inject IDbContextFactory<PostgresContext> ContextFactory;
@using StatybaServer.Models
@using Microsoft.EntityFrameworkCore
@using StatybaServer.Data
@using System.Net.Http.Headers;
@inject HttpClient Http


<h3>Prekės</h3>
<BSButton Target="modalPreke" OnClick="@(() => { _modelW = new Preke();})"  Size="Size.Medium" Color="BSColor.Primary" >Pridėti prekę</BSButton>
<BSDataTable FetchItems="FetchPrekes" Context="p" PaginationBottom="false">
    <Header>
        <BSDataTableHead TValue="Preke" Column="@(nameof(Preke.IdPreke))">ID</BSDataTableHead>
        <BSDataTableHead TValue="Preke" Column="@(nameof(Preke.Pavadinimas))">      Pavadinimas         </BSDataTableHead>
        <BSDataTableHead TValue="Preke" Column="@(nameof(Preke.Kategorija))">       Kategorija          </BSDataTableHead>
        <BSDataTableHead TValue="Preke" Column="@(nameof(Preke.VienetoKaina))">     Vieneto Kaina       </BSDataTableHead>
        <BSDataTableHead TValue="Preke" Column="@(nameof(Preke.Kiekis))">           Kiekis              </BSDataTableHead>
        <BSDataTableHead TValue="Preke" Column="@(nameof(Preke.Aprasymas))">        Aprašymas           </BSDataTableHead>
        <BSDataTableHead TValue="Preke" Column="@(nameof(Preke.TrumpasAprasymas))"> Trumpas aprašymas   </BSDataTableHead>
        <BSDataTableHead TValue="Preke" Column="@(nameof(Preke.Nuotrauka))">        Nuotrauka           </BSDataTableHead>
        <BSDataTableHead TValue="BSTD">Redagavimas</BSDataTableHead>
    </Header>
    <Body>
        <BSDataTableRow>
            <BSTD>@p.IdPreke            </BSTD>
            <BSTD>@p.Pavadinimas        </BSTD>
            <BSTD>@p.Kategorija         </BSTD>
            <BSTD>@p.VienetoKaina      </BSTD>
            <BSTD>@p.Kiekis             </BSTD>
            <BSTD>@p.Aprasymas          </BSTD>
            <BSTD>@p.TrumpasAprasymas  </BSTD>
            <BSTD><img src=@p.Nuotrauka style="height:200px;" />         </BSTD>
            
            
            <BSTD>
                <BSButton OnClick="@(() => {RemovePreke(@p.IdPreke);})"
                          Size="Size.Small" Color="BSColor.Danger">Ištrinti</BSButton>
                <BSButton Target="modalPreke" OnClick="@(() => {_modelW = @p; _isAdd=false;})"
                    Size="Size.Small" Color="BSColor.Secondary">Redaguoti</BSButton>
            </BSTD>
        </BSDataTableRow>
    </Body>
</BSDataTable>

<BSModal DataId="modalPreke">
    <BSForm Model="_modelW" OnSubmit="AddPreke">
        <BSModalHeader>Naujos prekės forma</BSModalHeader>
        <BSModalContent>
           
            <div class="mb-3">
                <BSLabel>Pavadinimas</BSLabel>
                <BSInput InputType="InputType.Text" @bind-Value="_modelW.Pavadinimas" />
            </div>
            <div class="mb-3">
                <BSLabel>Kategorija</BSLabel>
                <BSInput InputType="InputType.Text" @bind-Value="_modelW.Kategorija" />
            </div>
            
            <div class="mb-3">
                <BSLabel>Vieneto Kaina</BSLabel>
                <BSInput InputType="InputType.Text" @bind-Value="_modelW.VienetoKaina" />
            </div>
            <div class="mb-3">
                <BSLabel>Kiekis</BSLabel>
                <BSInput InputType="InputType.Number" @bind-Value="_modelW.Kiekis" />
            </div>
            <div class="mb-3">
                <BSLabel>Aprašymas</BSLabel>
                <BSInput InputType="InputType.Text" @bind-Value="_modelW.Aprasymas" />
            </div>
            <div class="mb-3">
                <BSLabel>Trumpas aprašymas</BSLabel>
                <BSInput InputType="InputType.Text" @bind-Value="_modelW.TrumpasAprasymas" />
            </div>
            <div class="mb-3">
                <InputFile OnChange="@OnInputFileChange" single />
            </div>
        </BSModalContent>
        <BSModalFooter>
            <BSButton Target="modalPreke">Atšaukti</BSButton>
            <BSButton OnClick="@(() => { _modelW.Nuotrauka = @GetStoredFileName(fileNames[0]);})" IsSubmit="true" Color="BSColor.Primary">Pridėti prekę</BSButton>
        </BSModalFooter>
    </BSForm>
</BSModal>




@code {
    private List<Skyrius> _deparments = new List<Skyrius>();
    private List<Pareigos> _positions = new List<Pareigos>();
    private Preke _modelW = new Preke();
    private bool _isAdd = true;

    private int maxAllowedFiles = 1;
	private long maxFileSize = long.MaxValue;
	private List<string> fileNames = new();
	private List<UploadResult> uploadResults = new();

    private ModalClass Modal { get; set; } = new ModalClass();

    private void OnFileChange(InputFileChangeEventArgs e)
    {
        // Resets Validation. Everytime InputFile is clicked it resets.
        Modal.HasFile = null;
        if (e.FileCount > 0)
            Modal.HasFile = true;
    }

    private class ModalClass
    {
        public bool? HasFile { get; set; }
    }

    

    private Task RemovePreke(int id)
    {
        // Deletes worker
        using PostgresContext pgContext = ContextFactory.CreateDbContext();
        var prekes = pgContext.Prekes.First(d => d.IdPreke == id);

        pgContext.Prekes.Remove(prekes);

        pgContext.SaveChanges();

        NavManager.NavigateTo("/prodList", true);
        return Task.CompletedTask;
    }

    #region Add
    private async Task AddPreke()
    {
        using PostgresContext pgContext = ContextFactory.CreateDbContext();
        if(_isAdd)
        {


            
            await pgContext.Prekes.AddAsync(_modelW);
            pgContext.SaveChanges();

            BlazorStrap.ForwardClick("modalPreke");
            NavManager.NavigateTo("/prodList", true);
        }
        else
        {
            await Task.CompletedTask;
            pgContext.Entry(_modelW).State = EntityState.Modified;
            pgContext.SaveChanges();
            BlazorStrap.ForwardClick("modalPreke");
            NavManager.NavigateTo("/prodList", true);
        }

    }

    #endregion

    #region Fetch

    private async Task<(IEnumerable<Preke>, int)> FetchPrekes(DataRequest dataRequest)
    {
        using PostgresContext pgContext = ContextFactory.CreateDbContext();
        var data = pgContext.Prekes.ToList();
        var count = data.Count();

        return await Task.FromResult((data, count));
    }
    #endregion

    private async Task OnInputFileChange(InputFileChangeEventArgs e)
	{
		using var content = new MultipartFormDataContent();

		foreach(var file in e.GetMultipleFiles(maxAllowedFiles))
		{
			var fileContent = new StreamContent(file.OpenReadStream(maxFileSize));
			fileContent.Headers.ContentType = new System.Net.Http.Headers.MediaTypeHeaderValue(file.ContentType);

			fileNames.Add(file.Name);

			content.Add(
				content: fileContent,
				name: "\"files\"",
				fileName: file.Name);
		}

		var response = await Http.PostAsync("https://localhost:44306/api/File", content);
		var newUploadResults = await response.Content.ReadFromJsonAsync<List<UploadResult>>();

		if(newUploadResults is not null)
		{
			uploadResults = uploadResults.Concat(newUploadResults).ToList();
		}
	}

    private string? GetStoredFileName(string fileName)
	{
		var uploadResult = uploadResults.SingleOrDefault(f => f.FileName == fileName);
		if(uploadResult is not null)
		{
			return  "uploads/" + uploadResult.StoredFileName;
		}
		return _modelW.Nuotrauka;
	}
    
}