@page "/login"
@using StatybaServer.Authentication
@using System.Reflection.Metadata
@using BlazorStrap.Utilities
@using StatybaServer.Data
@inject WorkerAccountService WorkerAccountService
@inject IJSRuntime Js
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject NavigationManager NavManager

<PageTitle>Prisijungimas</PageTitle>
<body id="page-top">
<form class="col-8 container ">
    
    <div class="form-floating mb-4 align-items-center">
        <input @bind="_model.Username" type="text" id="username" class="form-control" placeholder="Prisijungimo vardas"/>
        <label class="form-label" for="username">Prisijungimo vardas</label>
    </div>

    <div class="form-floating mb-4">
        <input @bind="_model.Password" type="password" id="password" class="form-control" placeholder="Slaptažodis"/>
        <label class="form-label" for="password">Slaptažodis</label>
    </div>
    
    <BSButton Color="BSColor.Primary" @onclick="Authenticate" Target="modal">Prisijungti</BSButton>
      @if (_showSpinner)
        {
            <BSSpinner Color="BSColor.Dark"/>
        }

      <BSModal DataId="modal"  Size="Size.Small">
          <Header>Klaida</Header>
          <Content>Neteisingas prisijungimo vardas arba slaptažodis!</Content>
          <Footer Context="modal">
              <BSButton OnClick="modal.HideAsync" MarginStart="Margins.Auto" Color="BSColor.Primary">Supratau</BSButton>
          </Footer>
      </BSModal>

</form>
</body>

@code {// TODO: parodyti modal TIK PO neteisingo prisijungimo
    
    private bool _showSpinner = false;
    private class Model
    {
        public string Username { get; set; }
        public string Password { get; set; }
    }

    private readonly Model _model = new();
    
    private async Task Authenticate()
    {
        _showSpinner = true;
        var workerAccount = WorkerAccountService.GetUserByName(_model.Username);
        if (workerAccount == null ||
            workerAccount.Slaptazodis != TaskUtils.CalculateHash(_model.Username, _model.Password).Result)
        {
            _showSpinner = false;
            return;
        }
        var authenStateProvider = (CustomAuthenticationStateProvider)AuthenticationStateProvider;
    // saves value into session storage
        await authenStateProvider.UpdateAuthenticationState(new UserSession
        {
            Username = workerAccount.PrisijungimoVardas,
            Role = workerAccount.Role
        });
        NavManager.NavigateTo("/", true);
    }
}
