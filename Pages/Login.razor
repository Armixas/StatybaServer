@page "/login"
@using StatybaServer.Authentication
@inject WorkerAccountService WorkerAccountService
@inject IJSRuntime Js
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject NavigationManager NavManager

<PageTitle>Prisijungimas</PageTitle>
<body id="page-top">
<form class="col-8 container ">
    
    <div class="form-outline mb-4 align-items-center">
        <input @bind="_model.Username" type="text" id="username" class="form-control"/>
        <label class="form-label" for="username">Prisijungimo vardas</label>
    </div>

    <div class="form-outline mb-4">
        <input @bind="_model.Password" type="password" id="password" class="form-control"/>
        <label class="form-label" for="password">Slaptažodis</label>
    </div>

    <a @onclick="Authenticate" class="btn btn-outline-dark mt-auto">Prisijungti</a>
</form>
</body>

@code {

    private class Model
    {
        public string Username { get; set; }
        public string Password { get; set; }
    }

    private readonly Model _model = new();

    private async Task Authenticate()
    {
        var workerAccount = WorkerAccountService.GetUserByName(_model.Username);
        if (workerAccount == null || workerAccount.Slaptazodis != _model.Password)
        {
            await Js.InvokeVoidAsync("Klaida", "Netinkamas vartotojo vardas arba slaptažodis!");
            return;
        }
        var authenStateProvider = (CustomAuthenticationStateProvider)AuthenticationStateProvider;
    // saves value into session storage
        await authenStateProvider.UpdateAuthenticationState(new UserSession
        {
            Username = workerAccount.Slaptazodis,
            Role = workerAccount.Role
        });
        NavManager.NavigateTo("/", true);
    }

}