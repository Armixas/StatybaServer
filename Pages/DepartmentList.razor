@page "/departmentlist"
@using StatybaServer.Models
@using Microsoft.EntityFrameworkCore
@inject IBlazorStrap BlazorStrap
@inject NavigationManager NavManager
@inject IDbContextFactory<PostgresContext> ContextFactory;
@using System.ComponentModel.DataAnnotations
<h3>Sandėliai</h3>
<BSButton Target="modalSandelis" OnClick="@(() => { _modelS = new Sandelis();})" Size="Size.Medium" Color="BSColor.Primary">Pridėti sandėlį</BSButton>
<BSDataTable FetchItems="FetchWarehouse" Context="s" PaginationBottom="false">
    <Header>
        <BSDataTableHead TValue="Sandelis" Column="@(nameof(Sandelis.IdSandelis))">ID</BSDataTableHead>
        <BSDataTableHead TValue="Sandelis" Column="@(nameof(Sandelis.Salis))">Šalis</BSDataTableHead>
        <BSDataTableHead TValue="Sandelis" Column="@(nameof(Sandelis.Miestas))">Miestas</BSDataTableHead>
        <BSDataTableHead TValue="Sandelis" Column="@(nameof(Sandelis.Adresas))">Adresas</BSDataTableHead>
        <BSDataTableHead TValue="BSTD">Redagavimas</BSDataTableHead>
    </Header>
    <Body>
    <BSDataTableRow>
        <BSTD>@s.IdSandelis</BSTD>
        <BSTD>@s.Salis</BSTD>
        <BSTD>@s.Miestas</BSTD>
        <BSTD>@s.Adresas</BSTD>
        <BSTD>
            <BSButton OnClick="@(() => {RemoveSandelis(@s.IdSandelis);})"
                                  Size="Size.Small" Color="BSColor.Danger">Ištrinti</BSButton>
            <BSButton Target="modalSandelis" OnClick="@(() => {_modelS = @s; _isAdd=false;})" Size="Size.Small" Color="BSColor.Secondary">Redaguoti</BSButton>
        </BSTD>
    </BSDataTableRow>
    </Body>
</BSDataTable>

<BSModal DataId="modalSandelis" OnShow="@(() => {_modelS = new Sandelis();})">
    <BSForm Model="_modelS" OnValidSubmit="AddSandelis">
        <BSModalHeader>Naujo sandėlio forma</BSModalHeader>
        <BSModalContent>
            <BSFrom>
                <DataAnnotationsValidator />
                <div class="mb-3">
                    <BSLabel>Šalis</BSLabel>
                    <BSInput InputType="InputType.Text" ValidateOnInput="true" @bind-Value="_modelS.Salis"/>
                </div>
                <div class="mb-3">
                    <BSLabel>Miestas</BSLabel>
                    <BSInput InputType="InputType.Text" ValidateOnInput="true" @bind-Value="_modelS.Miestas"/>
                </div>
                <div class="mb-3">
                    <BSLabel>Adresas</BSLabel>
                    <BSInput InputType="InputType.Text" ValidateOnInput="true" @bind-Value="_modelS.Adresas"/>
                </div>
            </BSFrom>
        </BSModalContent>
        <BSModalFooter>
            <BSButton Target="modalSandelis">Atšaukti</BSButton>
            <BSButton IsSubmit="true" Color="BSColor.Primary">Sukurti sandėlį</BSButton>
        </BSModalFooter>
    </BSForm>
</BSModal>



<h3>Skyriai</h3>


<BSButton Target="modalSkyrius" OnClick="@(() => { _modelSk = new Skyrius();})" Size="Size.Medium" Color="BSColor.Primary">Pridėti skyrių</BSButton>
<BSDataTable FetchItems="FetchDepartment" Context="sk" PaginationBottom="false">
    <Header>
        <BSDataTableHead TValue="Skyrius" Column="@(nameof(Skyrius.IdSkyrius))">ID</BSDataTableHead>
        <BSDataTableHead TValue="string">Sandėlio pavadinimas</BSDataTableHead>
        <BSDataTableHead TValue="Skyrius" Column="@(nameof(Skyrius.Pavadinimas))">Skyriaus pavadinimas</BSDataTableHead>
        <BSDataTableHead TValue="BSTD">Redagavimas</BSDataTableHead>
    </Header>
    <Body>
    <BSDataTableRow>
        <BSTD>@sk.IdSkyrius</BSTD>
        <BSTD>@GetWarehouseData(sk.FkSandelisidSandelis).Result</BSTD>
        <BSTD>@sk.Pavadinimas</BSTD>
        <BSTD>
            <BSButton OnClick="@(() => {RemoveSkyrius(@sk.IdSkyrius);})"
                      Size="Size.Small" Color="BSColor.Danger">Ištrinti</BSButton>
            <BSButton Target="modalSkyrius" OnClick="@(() => { _modelSk = @sk; _isAdd=false;})" Size="Size.Small" Color="BSColor.Secondary">Redaguoti</BSButton>
        </BSTD>
    </BSDataTableRow>
    </Body>
</BSDataTable>

<BSModal DataId="modalSkyrius" OnShow="@(() => {_modelSk = new Skyrius();
                                                   _warehouse = WarehouseSelection().Result;})">
    <BSForm Model="_modelSk" OnValidSubmit="AddSkyrius">
        <BSModalHeader>Naujo skyriaus forma</BSModalHeader>
        <BSModalContent>
            <BSFrom>
                <DataAnnotationsValidator />
                <div class="mb-3">
                    <BSLabel>Sandėlis</BSLabel>
                    <BSInput InputType="InputType.Select" ValidateOnInput="true" @bind-Value="_modelSk.FkSandelisidSandelis">
                        @for (int i = 0; i < _warehouse.Count; i++)
                        {
                            var w = _warehouse[i];
                            string warehouse = w.Salis + ", " + w.Miestas + ", " + w.Adresas;
                            <option value="@_warehouse[i].IdSandelis">
                                @warehouse
                            </option>
                        }
                    </BSInput>
                </div>
                <div class="mb-3">
                    <BSLabel>Skyriaus pavadinimas</BSLabel>
                    <BSInput InputType="InputType.Text" ValidateOnInput="true" @bind-Value="_modelSk.Pavadinimas"/>
                </div>
            </BSFrom>
        </BSModalContent>
        <BSModalFooter>
            <BSButton Target="modalSkyrius">Atšaukti</BSButton>
            <BSButton IsSubmit="true" Color="BSColor.Primary">Sukurti skyrių</BSButton>
        </BSModalFooter>
    </BSForm>
</BSModal>

@code {
    private List<Sandelis> _warehouse = new List<Sandelis>();
    private Sandelis _modelS = new Sandelis();
    private Skyrius _modelSk = new Skyrius();
    private bool _isAdd = true;
    #region AddMethods

    private async Task AddSandelis()
    {
        using PostgresContext pgContext = ContextFactory.CreateDbContext();
        if (_isAdd)
        {
            await pgContext.Sandelis.AddAsync(_modelS);
            pgContext.SaveChanges();
    // worst way to "refresh" table
            BlazorStrap.ForwardClick("modalSandelis");
            NavManager.NavigateTo("/departmentlist", true);
        }
        else
        {
            await Task.CompletedTask;
            pgContext.Entry(_modelS).State = EntityState.Modified;
            pgContext.SaveChanges();
            BlazorStrap.ForwardClick("modalSandelis");
            NavManager.NavigateTo("/departmentlist", true);
        }
    }
    private async Task AddSkyrius()
    {
        using PostgresContext pgContext = ContextFactory.CreateDbContext();
        if (_isAdd)
        {
            int id = 0;
            if (pgContext.Skyrius.Count() != 0)
                id = pgContext.Skyrius.Max(s => s.IdSkyrius) + 1;
            _modelSk.IdSkyrius = id;

            await pgContext.Skyrius.AddAsync(_modelSk);
            pgContext.SaveChanges();
    // worst way to "refresh" table
            BlazorStrap.ForwardClick("modalSkyrius");
            NavManager.NavigateTo("/departmentlist", true);
        }
        else
        {
            await Task.CompletedTask;
            pgContext.Entry(_modelSk).State = EntityState.Modified;
            pgContext.SaveChanges();
            BlazorStrap.ForwardClick("modalSandelis");
            NavManager.NavigateTo("/departmentlist", true);
        }
    }

    #endregion

    #region RemoveMethods
    private Task RemoveSkyrius(int id)
    {
        // Deletes department and workers working who belong to it
        using PostgresContext pgContext = ContextFactory.CreateDbContext();
        var skyrius = pgContext.Skyrius
            .Where(s => s.IdSkyrius == id)
            .Include(s => s.Darbuotojas);

        pgContext.Skyrius.RemoveRange(skyrius);
        pgContext.SaveChanges();
        NavManager.NavigateTo("/departmentlist", true);

        return Task.CompletedTask;
    }

    private Task RemoveSandelis(int id)
    {
        // Deletes warehouse and department if it's not full
        using PostgresContext pgContext = ContextFactory.CreateDbContext();
        var sandelis = pgContext.Sandelis
            .Where(s => s.IdSandelis == id)
            .Include(s => s.Skyrius);

        pgContext.Sandelis.RemoveRange(sandelis);
        pgContext.SaveChanges();
        NavManager.NavigateTo("/departmentlist", true);

        return Task.CompletedTask;
    }

    #endregion

    private async Task<List<Sandelis>> WarehouseSelection()
    {
        using PostgresContext pgContext = ContextFactory.CreateDbContext();
        var warehouses = pgContext.Sandelis.ToList();

        return await Task.FromResult(warehouses);
    }

    #region TableInfo
    
    private async Task<(IEnumerable<Sandelis>, int)> FetchWarehouse(DataRequest dataRequest)
    {
        using PostgresContext pgContext = ContextFactory.CreateDbContext();
        var data = pgContext.Sandelis.ToList();
        var count = data.Count();

        return await Task.FromResult((data, count));
    }

    private async Task<(IEnumerable<Skyrius>, int)> FetchDepartment(DataRequest dataRequest)
    {
        using PostgresContext pgContext = ContextFactory.CreateDbContext();
        var data = pgContext.Skyrius.ToList();
        var count = data.Count();

        return await Task.FromResult((data, count));
    }

    private async Task<string> GetWarehouseData(int id)
    {
        using PostgresContext pgContext = ContextFactory.CreateDbContext();
        Sandelis w = pgContext.Sandelis.First(s => s.IdSandelis == id);
        
        return await Task.FromResult($"{w.Salis}, {w.Miestas}, {w.Adresas}"); 
    }

    #endregion
   
}
